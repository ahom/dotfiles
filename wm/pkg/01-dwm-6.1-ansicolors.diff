diff -up dwm-6.1/config.def.h dwm-6.1-patched/config.def.h
--- dwm-6.1/config.def.h	2015-11-08 23:39:37.000000000 +0100
+++ dwm-6.1-patched/config.def.h	2015-11-09 21:48:45.100844589 +0100
@@ -4,17 +4,31 @@
 static const char *fonts[] = {
 	"monospace:size=10"
 };
-static const char dmenufont[]       = "monospace:size=10";
-static const char normbordercolor[] = "#444444";
-static const char normbgcolor[]     = "#222222";
-static const char normfgcolor[]     = "#bbbbbb";
-static const char selbordercolor[]  = "#005577";
-static const char selbgcolor[]      = "#005577";
-static const char selfgcolor[]      = "#eeeeee";
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
-static const unsigned int snap      = 32;       /* snap pixel */
-static const int showbar            = 1;        /* 0 means no bar */
-static const int topbar             = 1;        /* 0 means bottom bar */
+static const char dmenufont[]        = "monospace:size=10";
+static const char dmenunormbgcolor[] = "#222222";
+static const char dmenunormfgcolor[] = "#bbbbbb";
+static const char dmenuselbgcolor[]  = "#005577";
+static const char dmenuselfgcolor[]  = "#eeeeee";
+static const unsigned int borderpx   = 1;        /* border pixel of windows */
+static const unsigned int snap       = 32;       /* snap pixel */
+static const int showbar             = 1;        /* 0 means no bar */
+static const int topbar              = 1;        /* 0 means bottom bar */
+
+/* colors */
+static const char *colors[] = {
+	"#444444",
+	"#222222",
+	"#bbbbbb",
+	"#005577",
+	"#eeeeee",
+};
+
+static const size_t normbordercolorid = 0;
+static const size_t normbgcolorid     = 1;
+static const size_t normfgcolorid     = 2;
+static const size_t selbordercolorid  = 3;
+static const size_t selbgcolorid      = 3;
+static const size_t selfgcolorid      = 4;
 
 /* tagging */
 static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
@@ -41,6 +55,8 @@ static const Layout layouts[] = {
 	{ "[M]",      monocle },
 };
 
+static const char monocleformat[] = "[%d]";
+
 /* key definitions */
 #define MODKEY Mod1Mask
 #define TAGKEYS(KEY,TAG) \
@@ -54,7 +70,7 @@ static const Layout layouts[] = {
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
+static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", dmenunormbgcolor, "-nf", dmenunormfgcolor, "-sb", dmenuselbgcolor, "-sf", dmenuselfgcolor, NULL };
 static const char *termcmd[]  = { "st", NULL };
 
 static Key keys[] = {
diff -up dwm-6.1/drw.c dwm-6.1-patched/drw.c
--- dwm-6.1/drw.c	2015-11-08 23:39:37.000000000 +0100
+++ dwm-6.1-patched/drw.c	2015-11-09 21:57:37.204193449 +0100
@@ -10,6 +10,7 @@
 
 #define UTF_INVALID 0xFFFD
 #define UTF_SIZ     4
+#define ANSI_ESC    '\x1B'
 
 static const unsigned char utfbyte[UTF_SIZ + 1] = {0x80,    0, 0xC0, 0xE0, 0xF0};
 static const unsigned char utfmask[UTF_SIZ + 1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};
@@ -60,6 +61,56 @@ utf8decode(const char *c, long *u, size_
 	return len;
 }
 
+static int
+parseansiescape(Drw *drw, const char *text)
+{
+	const char *t = text, *ec;
+	char *end;
+	int isfg, color = -1;
+	long code;
+
+	if (*(t++) == ANSI_ESC && *(t++) == '[') {
+		if (*t == '3' || *t == '4') {
+			isfg = (*t == '3');
+			code = (long)(*(++t) - '0');
+			if (code <= 8 && code >= 0) {
+				if (code != 8) {
+					if (*(++t) == 'm') {
+						++t;
+						color = code;
+					}
+				} else {
+					if (*(++t) == ';' && *(++t) == '5' && *(++t) == ';') {
+						for (ec = ++t; *ec && *ec != 'm'; ++ec);
+						if (*ec && t != ec) {
+							code = strtol(t, &end, 10);
+							if (end == ec && code >= 0 && code <= 255) {
+								t = ++ec;
+								color = code;
+							}
+						}
+					}
+				}
+			}
+		}
+	}
+
+	if (color != -1 && color < drw->colorcount) {
+		if (isfg) {
+			drw->fg = color;
+		} else {
+			drw->bg = color;
+		}
+		return t - text;
+	}
+	return 0;
+}
+
+static int
+verifycolors(Drw *drw) {
+	return drw->bg < drw->colorcount && drw->fg < drw->colorcount;
+}
+
 Drw *
 drw_create(Display *dpy, int screen, Window root, unsigned int w, unsigned int h)
 {
@@ -96,6 +147,8 @@ drw_free(Drw *drw)
 
 	for (i = 0; i < drw->fontcount; i++)
 		drw_font_free(drw->fonts[i]);
+	for (i = 0; i < drw->colorcount; i++)
+		drw_clr_free(drw->colors[i]);
 	XFreePixmap(drw->dpy, drw->drawable);
 	XFreeGC(drw->dpy, drw->gc);
 	free(drw);
@@ -201,17 +254,11 @@ drw_clr_free(Clr *clr)
 }
 
 void
-drw_setscheme(Drw *drw, ClrScheme *scheme)
-{
-	drw->scheme = scheme;
-}
-
-void
 drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h, int filled, int empty, int invert)
 {
-	if (!drw->scheme)
+	if (!verifycolors(drw))
 		return;
-	XSetForeground(drw->dpy, drw->gc, invert ? drw->scheme->bg->pix : drw->scheme->fg->pix);
+	XSetForeground(drw->dpy, drw->gc, drw->colors[invert ? drw->bg : drw->fg]->pix);
 	if (filled)
 		XFillRectangle(drw->dpy, drw->drawable, drw->gc, x, y, w + 1, h + 1);
 	else if (empty)
@@ -223,6 +270,8 @@ drw_text(Drw *drw, int x, int y, unsigne
 {
 	char buf[1024];
 	int tx, ty, th;
+	int isfirstpass = 1;
+	int iscolordelimiter;
 	Extnts tex;
 	XftDraw *d = NULL;
 	Fnt *curfont, *nextfont;
@@ -236,26 +285,36 @@ drw_text(Drw *drw, int x, int y, unsigne
 	XftResult result;
 	int charexists = 0;
 
-	if (!drw->scheme || !drw->fontcount)
+	if (!verifycolors(drw) || !drw->fontcount)
 		return 0;
 
 	if (!(render = x || y || w || h)) {
 		w = ~w;
 	} else {
-		XSetForeground(drw->dpy, drw->gc, invert ?
-		               drw->scheme->fg->pix : drw->scheme->bg->pix);
-		XFillRectangle(drw->dpy, drw->drawable, drw->gc, x, y, w, h);
 		d = XftDrawCreate(drw->dpy, drw->drawable,
 		                  DefaultVisual(drw->dpy, drw->screen),
 		                  DefaultColormap(drw->dpy, drw->screen));
 	}
 
 	curfont = drw->fonts[0];
-	while (1) {
+	tx = drw->fonts[0]->h / 2;
+	while (w > tx) {
+		iscolordelimiter = 0;
 		utf8strlen = 0;
 		utf8str = text;
 		nextfont = NULL;
 		while (*text) {
+			if (*text == ANSI_ESC) {
+				if (!utf8strlen) {
+					len = MAX(parseansiescape(drw, text), 1);
+					text += len;
+					utf8str += len;
+					continue;
+				} else {
+					iscolordelimiter = 1;
+					break;
+				}
+			}
 			utf8charlen = utf8decode(text, &utf8codepoint, UTF_SIZ);
 			for (i = 0; i < drw->fontcount; i++) {
 				charexists = charexists || XftCharExists(drw->dpy, drw->fonts[i]->xfont, utf8codepoint);
@@ -277,22 +336,33 @@ drw_text(Drw *drw, int x, int y, unsigne
 		}
 
 		if (utf8strlen) {
+			if (isfirstpass) {
+				/* left margin */
+				if (render) {
+					XSetForeground(drw->dpy, drw->gc, drw->colors[invert ? drw->fg : drw->bg]->pix);
+					XFillRectangle(drw->dpy, drw->drawable, drw->gc, x, y, tx, h);
+					x += tx;
+					w -= tx;
+				}
+				isfirstpass = 0;
+			}
 			drw_font_getexts(curfont, utf8str, utf8strlen, &tex);
 			/* shorten text if necessary */
-			for (len = MIN(utf8strlen, (sizeof buf) - 1); len && (tex.w > w - drw->fonts[0]->h || w < drw->fonts[0]->h); len--)
+			for (len = MIN(utf8strlen, (sizeof buf) - 1); len && (tex.w > w - tx || w < tx); len--)
 				drw_font_getexts(curfont, utf8str, len, &tex);
 
 			if (len) {
 				memcpy(buf, utf8str, len);
 				buf[len] = '\0';
 				if (len < utf8strlen)
-					for (i = len; i && i > len - 3; buf[--i] = '.');
+					for (i = len; i && i > MAX(len, 3) - 3; buf[--i] = '.');
 
 				if (render) {
 					th = curfont->ascent + curfont->descent;
 					ty = y + (h / 2) - (th / 2) + curfont->ascent;
-					tx = x + (h / 2);
-					XftDrawStringUtf8(d, invert ? &drw->scheme->bg->rgb : &drw->scheme->fg->rgb, curfont->xfont, tx, ty, (XftChar8 *)buf, len);
+					XSetForeground(drw->dpy, drw->gc, drw->colors[invert ? drw->fg : drw->bg]->pix);
+					XFillRectangle(drw->dpy, drw->drawable, drw->gc, x, y, tex.w, h);
+					XftDrawStringUtf8(d, &drw->colors[invert ? drw->bg : drw->fg]->rgb, curfont->xfont, x, ty, (XftChar8 *)buf, len);
 				}
 				x += tex.w;
 				w -= tex.w;
@@ -304,6 +374,8 @@ drw_text(Drw *drw, int x, int y, unsigne
 		} else if (nextfont) {
 			charexists = 0;
 			curfont = nextfont;
+		} else if (iscolordelimiter) {
+			charexists = 0;
 		} else {
 			/* Regardless of whether or not a fallback font is found, the
 			 * character must be drawn.
@@ -344,8 +416,13 @@ drw_text(Drw *drw, int x, int y, unsigne
 			}
 		}
 	}
-	if (d)
+	/* right margin */
+	if (d) {
+		XSetForeground(drw->dpy, drw->gc, drw->colors[invert ? drw->fg : drw->bg]->pix);
+		XFillRectangle(drw->dpy, drw->drawable, drw->gc, x, y, w, h);
+		x += w;
 		XftDrawDestroy(d);
+	}
 
 	return x;
 }
@@ -396,3 +473,17 @@ drw_cur_free(Drw *drw, Cur *cursor)
 	XFreeCursor(drw->dpy, cursor->cursor);
 	free(cursor);
 }
+
+void
+drw_setbg(Drw *drw, size_t bg) {
+	if (bg < drw->colorcount) {
+		drw->bg = bg;
+	}
+}
+
+void
+drw_setfg(Drw *drw, size_t fg) {
+	if (fg < drw->colorcount) {
+		drw->fg = fg;
+	}
+}
diff -up dwm-6.1/drw.h dwm-6.1-patched/drw.h
--- dwm-6.1/drw.h	2015-11-08 23:39:37.000000000 +0100
+++ dwm-6.1-patched/drw.h	2015-11-09 21:59:04.037529316 +0100
@@ -1,5 +1,6 @@
 /* See LICENSE file for copyright and license details. */
 #define DRW_FONT_CACHE_SIZE 32
+#define DRW_COLOR_CACHE_SIZE 256
 
 typedef struct {
 	unsigned long pix;
@@ -20,19 +21,16 @@ typedef struct {
 } Fnt;
 
 typedef struct {
-	Clr *fg;
-	Clr *bg;
-	Clr *border;
-} ClrScheme;
-
-typedef struct {
 	unsigned int w, h;
 	Display *dpy;
 	int screen;
 	Window root;
 	Drawable drawable;
 	GC gc;
-	ClrScheme *scheme;
+	size_t bg;
+	size_t fg;
+	size_t colorcount;
+	Clr *colors[DRW_COLOR_CACHE_SIZE];
 	size_t fontcount;
 	Fnt *fonts[DRW_FONT_CACHE_SIZE];
 } Drw;
@@ -63,8 +61,8 @@ Cur *drw_cur_create(Drw *, int);
 void drw_cur_free(Drw *, Cur *);
 
 /* Drawing context manipulation */
-void drw_setfont(Drw *, Fnt *);
-void drw_setscheme(Drw *, ClrScheme *);
+void drw_setbg(Drw *, size_t);
+void drw_setfg(Drw *, size_t);
 
 /* Drawing functions */
 void drw_rect(Drw *, int, int, unsigned int, unsigned int, int, int, int);
diff -up dwm-6.1/dwm.c dwm-6.1-patched/dwm.c
--- dwm-6.1/dwm.c	2015-11-08 23:39:37.000000000 +0100
+++ dwm-6.1-patched/dwm.c	2015-11-09 22:04:35.540872323 +0100
@@ -59,7 +59,6 @@
 
 /* enums */
 enum { CurNormal, CurResize, CurMove, CurLast }; /* cursor */
-enum { SchemeNorm, SchemeSel, SchemeLast }; /* color schemes */
 enum { NetSupported, NetWMName, NetWMState,
        NetWMFullscreen, NetActiveWindow, NetWMWindowType,
        NetWMWindowTypeDialog, NetClientList, NetLast }; /* EWMH atoms */
@@ -112,7 +111,7 @@ typedef struct {
 } Layout;
 
 struct Monitor {
-	char ltsymbol[16];
+	char ltsymbol[256];
 	float mfact;
 	int nmaster;
 	int num;
@@ -261,7 +260,6 @@ static void (*handler[LASTEvent]) (XEven
 static Atom wmatom[WMLast], netatom[NetLast];
 static int running = 1;
 static Cur *cursor[CurLast];
-static ClrScheme scheme[SchemeLast];
 static Display *dpy;
 static Drw *drw;
 static Monitor *mons, *selmon;
@@ -273,6 +271,9 @@ static Window root;
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
+/* compile-time check if all colors fit in the colors array. */
+struct NumColors { char limitexceeded[LENGTH(colors) > DRW_COLOR_CACHE_SIZE ? -1 : 1]; };
+
 /* function implementations */
 void
 applyrules(Client *c)
@@ -481,11 +482,6 @@ cleanup(void)
 		cleanupmon(mons);
 	for (i = 0; i < CurLast; i++)
 		drw_cur_free(drw, cursor[i]);
-	for (i = 0; i < SchemeLast; i++) {
-		drw_clr_free(scheme[i].border);
-		drw_clr_free(scheme[i].bg);
-		drw_clr_free(scheme[i].fg);
-	}
 	drw_free(drw);
 	XSync(dpy, False);
 	XSetInputFocus(dpy, PointerRoot, RevertToPointerRoot, CurrentTime);
@@ -704,7 +700,7 @@ dirtomon(int dir)
 void
 drawbar(Monitor *m)
 {
-	int x, xx, w, dx;
+	int x, xx, w, dx, issel;
 	unsigned int i, occ = 0, urg = 0;
 	Client *c;
 
@@ -718,14 +714,17 @@ drawbar(Monitor *m)
 	x = 0;
 	for (i = 0; i < LENGTH(tags); i++) {
 		w = TEXTW(tags[i]);
-		drw_setscheme(drw, m->tagset[m->seltags] & 1 << i ? &scheme[SchemeSel] : &scheme[SchemeNorm]);
+		issel = m->tagset[m->seltags] & 1 << i;
+		drw_setbg(drw, issel ? selbgcolorid : normbgcolorid);
+		drw_setfg(drw, issel ? selfgcolorid : normfgcolorid);
 		drw_text(drw, x, 0, w, bh, tags[i], urg & 1 << i);
 		drw_rect(drw, x + 1, 1, dx, dx, m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
 		           occ & 1 << i, urg & 1 << i);
 		x += w;
 	}
 	w = blw = TEXTW(m->ltsymbol);
-	drw_setscheme(drw, &scheme[SchemeNorm]);
+	drw_setbg(drw, normbgcolorid);
+	drw_setfg(drw, normfgcolorid);
 	drw_text(drw, x, 0, w, bh, m->ltsymbol, 0);
 	x += w;
 	xx = x;
@@ -736,17 +735,22 @@ drawbar(Monitor *m)
 			x = xx;
 			w = m->ww - xx;
 		}
+		drw_setbg(drw, normbgcolorid);
+		drw_setfg(drw, normfgcolorid);
 		drw_text(drw, x, 0, w, bh, stext, 0);
 	} else
 		x = m->ww;
 	if ((w = x - xx) > bh) {
 		x = xx;
 		if (m->sel) {
-			drw_setscheme(drw, m == selmon ? &scheme[SchemeSel] : &scheme[SchemeNorm]);
+			issel = m == selmon;
+			drw_setbg(drw, issel ? selbgcolorid : normbgcolorid);
+			drw_setfg(drw, issel ? selfgcolorid : normfgcolorid);
 			drw_text(drw, x, 0, w, bh, m->sel->name, 0);
 			drw_rect(drw, x + 1, 1, dx, dx, m->sel->isfixed, m->sel->isfloating, 0);
 		} else {
-			drw_setscheme(drw, &scheme[SchemeNorm]);
+			drw_setbg(drw, normbgcolorid);
+			drw_setfg(drw, normfgcolorid);
 			drw_rect(drw, x, 0, w, bh, 1, 0, 1);
 		}
 	}
@@ -807,7 +811,7 @@ focus(Client *c)
 		detachstack(c);
 		attachstack(c);
 		grabbuttons(c, 1);
-		XSetWindowBorder(dpy, c->win, scheme[SchemeSel].border->pix);
+		XSetWindowBorder(dpy, c->win, drw->colors[selbordercolorid]->pix);
 		setfocus(c);
 	} else {
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
@@ -1065,7 +1069,7 @@ manage(Window w, XWindowAttributes *wa)
 
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
-	XSetWindowBorder(dpy, w, scheme[SchemeNorm].border->pix);
+	XSetWindowBorder(dpy, w, drw->colors[normbordercolorid]->pix);
 	configure(c); /* propagates border_width, if size doesn't change */
 	updatewindowtype(c);
 	updatesizehints(c);
@@ -1124,7 +1128,7 @@ monocle(Monitor *m)
 		if (ISVISIBLE(c))
 			n++;
 	if (n > 0) /* override layout symbol */
-		snprintf(m->ltsymbol, sizeof m->ltsymbol, "[%d]", n);
+		snprintf(m->ltsymbol, sizeof m->ltsymbol, monocleformat, n);
 	for (c = nexttiled(m->clients); c; c = nexttiled(c->next))
 		resize(c, m->wx, m->wy, m->ww - 2 * c->bw, m->wh - 2 * c->bw, 0);
 }
@@ -1546,6 +1550,7 @@ setmfact(const Arg *arg)
 void
 setup(void)
 {
+	int i;
 	XSetWindowAttributes wa;
 
 	/* clean up any zombies immediately */
@@ -1580,12 +1585,10 @@ setup(void)
 	cursor[CurResize] = drw_cur_create(drw, XC_sizing);
 	cursor[CurMove] = drw_cur_create(drw, XC_fleur);
 	/* init appearance */
-	scheme[SchemeNorm].border = drw_clr_create(drw, normbordercolor);
-	scheme[SchemeNorm].bg = drw_clr_create(drw, normbgcolor);
-	scheme[SchemeNorm].fg = drw_clr_create(drw, normfgcolor);
-	scheme[SchemeSel].border = drw_clr_create(drw, selbordercolor);
-	scheme[SchemeSel].bg = drw_clr_create(drw, selbgcolor);
-	scheme[SchemeSel].fg = drw_clr_create(drw, selfgcolor);
+	drw->colorcount = LENGTH(colors);
+	for (i = 0; i < LENGTH(colors); ++i) {
+		drw->colors[i] = drw_clr_create(drw, colors[i]);
+	}
 	/* init bars */
 	updatebars();
 	updatestatus();
@@ -1745,7 +1748,7 @@ unfocus(Client *c, int setfocus)
 	if (!c)
 		return;
 	grabbuttons(c, 0);
-	XSetWindowBorder(dpy, c->win, scheme[SchemeNorm].border->pix);
+	XSetWindowBorder(dpy, c->win, drw->colors[normbordercolorid]->pix);
 	if (setfocus) {
 		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
 		XDeleteProperty(dpy, root, netatom[NetActiveWindow]);
